meta {
  name: Comments - Post Comment with Special Characters
  type: http
  seq: 52
}

post {
  url: http://localhost:8081/api/comments
  body: json
  auth: none
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "authorName": "–ú–∞—Ä–∫–æ –ü–µ—Ç—Ä–æ–≤–∏—õ",
    "text": "–û–≤–∞—ò –∫–æ–º–µ–Ω—Ç–∞—Ä —Å–∞–¥—Ä–∂–∏ —Å–ø–µ—Ü–∏—ò–∞–ª–Ω–µ –∫–∞—Ä–∞–∫—Ç–µ—Ä–µ: !@#$%^&*()_+-={}[]|\\:;\"'<>?,./ –∏ —õ–∏—Ä–∏–ª–∏—Ü–∞. –¢–µ—Å—Ç–∏—Ä–∞–º–æ –ø–æ–¥—Ä—à–∫—É –∑–∞ —Ä–∞–∑–ª–∏—á–∏—Ç–µ –∫–∞—Ä–∞–∫—Ç–µ—Ä–µ –∏ Unicode. Emoji —Ç–µ—Å—Ç: üéâüéµüé™ –ú–∞—Ç–µ–º–∞—Ç–∏—á–∫–∏ —Å–∏–º–±–æ–ª–∏: ‚àë‚àÜœÄ‚â†‚â§‚â•",
    "eventId": 3,
    "createdAt": "2025-08-14 17:05:00"
  }
}

vars:post-response {
  specialCommentId: res.body.id
}

tests {
  test("Post comment with special characters should return 201", function() {
    expect(res.getStatus()).to.equal(201);
  });
  
  test("Response should preserve special characters", function() {
    const responseJson = res.getBody();
    expect(responseJson).to.have.property('authorName');
    expect(responseJson).to.have.property('text');
    expect(responseJson.authorName).to.equal('–ú–∞—Ä–∫–æ –ü–µ—Ç—Ä–æ–≤–∏—õ');
    expect(responseJson.text).to.include('—õ–∏—Ä–∏–ª–∏—Ü–∞');
    expect(responseJson.text).to.include('üéâüéµüé™');
    expect(responseJson.text).to.include('‚àë‚àÜœÄ‚â†‚â§‚â•');
  });
  
  test("Special characters should not break JSON structure", function() {
    const responseJson = res.getBody();
    expect(responseJson).to.have.property('id');
    expect(responseJson).to.have.property('eventId');
    expect(responseJson.eventId).to.equal(3);
    expect(responseJson.likeCount).to.equal(0);
    expect(responseJson.dislikeCount).to.equal(0);
  });
}