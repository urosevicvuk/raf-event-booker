meta {
  name: Comments - Get Comments for Event
  type: http
  seq: 18
}

get {
  url: http://localhost:8081/api/comments/event/1
  body: none
  auth: none
}

tests {
  test("Get comments should return 200", function() {
    expect(res.getStatus()).to.equal(200);
  });

  test("Response should be an array", function() {
    const responseJson = res.getBody();
    expect(responseJson).to.be.an('array');
  });

  test("Comments should have correct structure", function() {
    const responseJson = res.getBody();
    
    responseJson.forEach(comment => {
      expect(comment).to.have.property('id');
      expect(comment).to.have.property('authorName');
      expect(comment).to.have.property('text');
      expect(comment).to.have.property('createdAt');
      expect(comment).to.have.property('eventId');
      expect(comment).to.have.property('likeCount');
      expect(comment).to.have.property('dislikeCount');
      expect(comment.eventId).to.equal(1);
    });
  });

  test("Comments should be sorted by creation date (newest first)", function() {
    const responseJson = res.getBody();
    if (responseJson.length > 1) {
      for (let i = 0; i < responseJson.length - 1; i++) {
        const current = new Date(responseJson[i].createdAt);
        const next = new Date(responseJson[i + 1].createdAt);
        expect(current.getTime()).to.be.at.least(next.getTime());
      }
    }
  });
}

vars:post-response {
  firstCommentId: res.body.length > 0 ? res.body[0].id : null
}